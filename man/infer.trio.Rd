% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/infer.trio.R
\name{infer.trio}
\alias{infer.trio}
\title{A wrapper function for get.freq(), Reg(), and PermReg() to infer an input trio}
\usage{
infer.trio(
  trio = NULL,
  use.perm = TRUE,
  gamma = 0.05,
  alpha = 0.01,
  nperms = 10000,
  verbose = FALSE
)
}
\arguments{
\item{trio}{A dataframe with at least 3 columns. The first column should be the genetic variant, and the second
and third columns the molecular phenotypes. Data in columns 4+ are treated as confounding variables}

\item{use.perm}{(logical) if TRUE the permutation test is used for trios with minor allele freq < gamma. If FALSE
test is ignored for all trios (default = TRUE)}

\item{gamma}{The minor allele frequency threshold for which the permutation test should be used such that permutation is
performed when minor allele freq < gamma (when use.perm = TRUE).}

\item{alpha}{The rejection threshold for all wald tests (default = 0.01) which is approximately the bonferroni correction}

\item{nperms}{The number of permutations to perform for trios with rare variants (default = 10,000)}

\item{verbose}{(logical) if TRUE results of the regressions are printed}
}
\value{
a list of length = 2
\describe{
\item{Stats}{a vector of length = 13 containing the indicator values and pvalues from the marginal and conditional
tests}
\item{Inferred.Model}{a string indicating the inferred model type as returned by \eqn{class.vec()}}
}
}
\description{
This function takes in a matrix representing a trio (with or without confounding variables) and performs the
MRGN inference. it returns a vector containing the results of the coefficient and marginal tests
}
\examples{
#inference on a single trio
result=infer.trio(M1trio)
print(result)

\dontrun{
#fast example on 10 trios from the built in dataset WBtrios
#return just the summary stats
stats = sapply(WBtrios[1:10], function(x) infer.trio(x)$Stats)
print(stats)
#return just the inferred model topology
models = sapply(WBtrios[1:10], function(x) infer.trio(x)$Inferred.Model)
print(models)
}
}
