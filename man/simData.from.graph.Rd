% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_trios_with_conf.R
\name{simData.from.graph}
\alias{simData.from.graph}
\title{A function to simulate data from a desired graph topology}
\usage{
simData.from.graph(
  model,
  theta,
  b0.1,
  b.snp,
  b.med,
  sd.1,
  conf.num.vec,
  number.of.T,
  number.of.V,
  struct,
  neg.freq = 0.5,
  degree = 2,
  method = "er",
  simulate.confs = TRUE,
  conf.mat,
  sample.size,
  plot.graph = TRUE,
  ar.sz = 0.2,
  conf.coef.ranges = list(K = c(0.01, 0.1), U = c(0.15, 0.5), W = c(0.15, 0.5), Z =
    c(1, 1.5))
)
}
\arguments{
\item{model}{a string specifying one of "model0","model1", "model2", "model3","model4", or "custom"}

\item{theta}{the frequency of the minor allele of the genetic variant}

\item{b0.1}{the intercept}

\item{b.snp}{a numeric or vector giving the effect(s) of the genetic variant(s)}

\item{b.med}{a numeric or vector giving the effect(s) between the molecular phenotypes(s)}

\item{sd.1}{the residual standard deviation (noise)}

\item{conf.num.vec}{a numeric vector of length 4 containing the number of known confounders,
unknown confounder, intermediate, and common child variables (in that order). To exclude a variable type,
input a zero at the given position. Note: intermediate variables (W) cannot be included for model4 and must
excluded (set to 0)}

\item{number.of.T}{a numeric indicating the number of T variables desired for model == "custom" only}

\item{number.of.V}{a numeric indicating the number of V variables desired for model == "custom" only}

\item{struct}{For use when when model == "custom". Either (1) a sub-adjacency matrix of dimension
(number.of.V + number.of.T) defining the topology of the V and T nodes
or (2) the string "random" denoting a random topology}

\item{neg.freq}{the frequency of negative effects for simulated effects. passed to gen.conf.coefs()}

\item{degree}{passed to get.custom.graph()}

\item{method}{passed to get.custom.graph()}

\item{simulate.confs}{(logical) indicating if U and K nodes should be simulated (default = TRUE).}

\item{conf.mat}{For use when simulate.confs = FALSE. A named dataframe with confounders (K and U nodes) in columns
and observations in rows. Note that the number of observations fixes the sample size for the simulation. K nodes should
be first in the columns represented by column names K1, K2 ... etc followed by U nodes with column names U1, U2, ... etc}

\item{sample.size}{a numeric value greater than 1 specifying the sample size when simulate.confs = TRUE}

\item{plot.graph}{(logical) when FALSE, graph is not plotted (default is TRUE)}

\item{ar.sz}{a numeric value giving the desired size of the edge arrows when plot.graph == TRUE}

\item{conf.coef.ranges}{a list of length 4 representing the U,K,W, and Z (in that order) node effects where each list
element is a vector of length 2 giving the minimum and maximum effect sizes for the given node. default values follow
from the simulations of Yang et. al., 2017}
}
\value{
a list of four elements
\describe{

\item{data}{a dataframe of the simulated data representing the network and its confounding variables}
\item{Adjacency}{the adjacency matrix of the network graph}
\item{Effects}{the adjacency matrix containing the effects used to simulate each node}
\item{igraph}{the igraph object representing the network}
\item{true.adj}{only returned when model = "model4". It is the true adjacency matrix of the graph (the graph plotted if plot.graph = TRUE)
where as the graph represented by \eqn{$adjacency} is the graph used to emulate the model 4 network}

}
}
\description{
This function wraps gen.graph.skel(), gen.conf.coef(), and find.parents() to simulate data from a given graph topology
using the topological order.
}
\examples{
# simulate 1000 samples from a model 1 graph with one of each type of confounding variable and
# plot the graph.
\dontrun{
## using simulated confounders:
X=simData.from.graph(theta=0.2,
                     model="model1",
                     b0.1=0,
                     b.snp=0.8,
                     b.med=0.6,
                     sd.1=0.8,
                     conf.num.vec = c(K = 1, U = 1, W = 1, Z = 1),
                     simulate.confs = TRUE,
                     plot.graph = TRUE,
                     sample.size = 1000,
                     conf.coef.ranges=list(K=c(0.01, 0.1), U=c(0.15,0.5),
                                           W=c(0.15,0.5), Z=c(1, 1.5)))
}
# simulate from a model 1 graph with one 2 "known" and 8 "unknown" confounders using a set of passed confounders and
# plot the graph.
\dontrun{
## using a set of passed confounders (K and U)
conf.mat = WBscores[,1:10]
#rename the columns
colnames(conf.mat) = c("K1","K2", paste0("U", 1:8))
X=simData.from.graph(theta=0.2,
                     model="model1",
                     b0.1=0,
                     b.snp=0.8,
                     b.med=0.6,
                     sd.1=0.8,
                     conf.num.vec = c(K = 2, U = 8, W = 1, Z = 1),
                     simulate.confs = FALSE,
                     plot.graph = TRUE,
                     conf.mat = conf.mat,
                     conf.coef.ranges=list(K=c(0.01, 0.1), U=c(0.15,0.5),
                                           W=c(0.15,0.5), Z=c(1, 1.5)))
}
}
