master.table2$mrgn.infer = mrgn.inf.w.f
mrpc.inf.w.f2=unlist(lapply(mrpc.inf.w.f, function(x) x$model))
mrpc.w.f.adj=lapply(mrpc.inf.w.f, function(x) x$Adj)
mrgn.w.f.adj=lapply(mrgn.inf.w.f, get.adj.from.class)
true.adj=lapply(convert.truth(params$model), get.adj.from.class)
params$true.score = unlist(lapply(true.adj, ind.med.edge))
mrgn.edge.ind.w.f = unlist(lapply(mrgn.w.f.adj, ind.med.edge))
mrpc.edge.ind.w.f = unlist(lapply(mrpc.w.f.adj, ind.med.edge))
gmac.edge.ind = apply(cbind(gmac.cis$output.table$Cis_Sig,
gmac.trans$output.table$Trans_Sig),
1, ind.gmac)
mrgn.metrics.t1t2 = cbind.data.frame(Method = rep("MRGN", 1500),
truth = params$true.score,
inf = mrgn.edge.ind.w.f)
mrpc.metrics.t1t2 = cbind.data.frame(Method = rep("MRPC", 1500),
truth = params$true.score,
inf = mrpc.edge.ind.w.f)
gmac.metrics.t1t2 = cbind.data.frame(Method = rep("GMAC", 1500),
truth = params$true.score,
inf = gmac.edge.ind)
colnames(params)[-c(1,7)]=c("Residual SD", "Minor Allele Frequency", "SNP Signal", "T1 - T2 Signal", "Number of Simulated Hidden Confounders")
#T1 - T2 edge inf plots first:
library(grid)
upper.lim = 1.1
#Residual SD
At1t2=plot.sim.metrics(metrics.mrgn = mrgn.metrics.t1t2,
metrics.mrpc = mrpc.metrics.t1t2,
metrics.gmac = gmac.metrics.t1t2,
params = params,
which.param = 2,
by.class=FALSE,
use.metric = "t1t2",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=10,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(0.15, 1.5, 0.25),
brks1 = seq(0.2, 1, 0.2),
brks2 = seq(0.2, 1, 0.2),
lmts1 = c(0.2,upper.lim),
lmts2 = c(0.2,upper.lim),
include.gmac = T,
include.mrpc = T,
sp.method = "loess",
save.plot=FALSE,
remove.ylab = TRUE)
#Minor Allele Freq
Bt1t2=plot.sim.metrics(metrics.mrgn = mrgn.metrics.t1t2,
metrics.mrpc = mrpc.metrics.t1t2,
metrics.gmac = gmac.metrics.t1t2,
params = params,
which.param = 3,
by.class=FALSE,
use.metric = "t1t2",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=10,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(0, 0.5, 0.1),
brks1 = seq(0.4, 1, 0.1),
brks2 = seq(0.5, 1, 0.1),
lmts1 = c(0.4, upper.lim),
lmts2 = c(0.5, upper.lim),
include.gmac = T,
include.mrpc = T,
sp.method = "loess",
save.plot=FALSE,
remove.ylab = TRUE)
#T1 - T2 Signal
Ct1t2=plot.sim.metrics(metrics.mrgn = mrgn.metrics.t1t2,
metrics.mrpc = mrpc.metrics.t1t2,
metrics.gmac = gmac.metrics.t1t2,
params = params,
which.param = 5,
by.class=FALSE,
use.metric = "t1t2",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=20,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(0.5, 1, 0.1),
brks1 = seq(0.2, 1, 0.2),
brks2 = seq(0.2, 1, 0.2),
lmts1 = c(0.2,upper.lim),
lmts2 = c(0.2,upper.lim),
include.gmac = T,
include.mrpc = T,
sp.method = "glm",
save.plot=FALSE)
#Number of Hidden Confounders
Dt1t2=plot.sim.metrics(metrics.mrgn = mrgn.metrics.t1t2,
metrics.mrpc = mrpc.metrics.t1t2,
metrics.gmac = gmac.metrics.t1t2,
params = params,
which.param = 6,
by.class=FALSE,
use.metric = "t1t2",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=10,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(1, 15, 1),
brks1 = seq(0.4, 1, 0.1),
brks2 = seq(0.5, 1, 0.1),
lmts1 = c(0.4,upper.lim),
lmts2 = c(0.5,upper.lim),
include.gmac = T,
include.mrpc = T,
sp.method = "loess",
save.plot=FALSE)
ABCD = ggarrange(Dt1t2$plot, Bt1t2$plot, Ct1t2$plot, At1t2$plot,
labels = c("A", "B", "C", "D"), align = "hv", legend = "top",
common.legend = T, legend.grob = At1t2$legend, hjust = -4)
pdf("C:/Users/Bruin/Documents/GitHub/MRGN_extra/Manuscript/Figures/MF1_MRGN.GMAC.MRPC.all.params.t1t2.pdf", height = 8, width = 12)
plot(ABCD)
dev.off()
#edge - based metrics plot MRGN v MRPC
edge.metrics.mrgn.wf=as.data.frame(matrix(0, nrow = 1500, ncol = 4))
colnames(edge.metrics.mrgn.wf)=c("prec_edge", "recall", "specificity", "FOR")
edge.metrics.mrpc.wf=as.data.frame(matrix(0, nrow = 1500, ncol = 4))
colnames(edge.metrics.mrpc.wf)=c("prec_edge", "recall", "specificity", "FOR")
for(i in 1:1500){
edge.metrics.mrgn.wf[i,] = get.metrics(Truth = convert.truth(params$model)[i],
Inferred = mrgn.w.f.adj[[i]],
get.adj.truth = TRUE)
edge.metrics.mrpc.wf[i,] = get.metrics(Truth = convert.truth(params$model)[i],
Inferred = mrpc.w.f.adj[[i]],
get.adj.truth = TRUE)
}
edge.metrics.mrgn.wf = cbind.data.frame(Method = rep("MRGN", 1500),
truth = convert.truth(params$model),
inf = convert.cats(mrgn.inf.w.f),
edge.metrics.mrgn.wf[,1:2])
edge.metrics.gmac.wf = cbind.data.frame(Method = rep("MRPC", 1500),
truth = convert.truth(params$model),
inf = rep(1,1500),
matrix(rep(1, 1500*2), nrow = 1500, ncol = 2))
edge.metrics.mrpc.wf = cbind.data.frame(Method = rep("MRPC", 1500),
truth = convert.truth(params$model),
inf = convert.cats(mrpc.inf.w.f2),
edge.metrics.mrpc.wf[,1:2])
upper.lim2 = 1.01
###########################################################
At1t2.1=plot.sim.metrics(metrics.mrgn = edge.metrics.mrgn.wf,
metrics.mrpc = edge.metrics.mrpc.wf,
metrics.gmac = edge.metrics.gmac.wf,
params = params,
which.param = 2,
by.class=FALSE,
use.metric = "edge",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=10,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(0.15, 1.5, 0.25),
brks1 = seq(0.75, 1, 0.05),
brks2 = seq(0.5, 1, 0.1),
lmts1 = c(0.75, upper.lim2),
lmts2 = c(0.5, upper.lim2),
include.gmac = F,
include.mrpc = T,
sp.method = "loess",
save.plot=FALSE,
remove.ylab = TRUE)
#Minor Allele Freq
Bt1t2.1=plot.sim.metrics(metrics.mrgn = edge.metrics.mrgn.wf,
metrics.mrpc = edge.metrics.mrpc.wf,
metrics.gmac = edge.metrics.gmac.wf,
params = params,
which.param = 3,
by.class=FALSE,
use.metric = "edge",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=10,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(0, 0.5, 0.1),
brks1 = seq(0.8, 1, 0.05),
brks2 = seq(0.5, 1, 0.1),
lmts1 = c(0.8, upper.lim2),
lmts2 = c(0.5, upper.lim2),
include.gmac = F,
include.mrpc = T,
sp.method = "loess",
save.plot=FALSE,
remove.ylab = TRUE)
#T1 - T2 Signal
Ct1t2.1=plot.sim.metrics(metrics.mrgn = edge.metrics.mrgn.wf,
metrics.mrpc = edge.metrics.mrpc.wf,
metrics.gmac = edge.metrics.gmac.wf,
params = params,
which.param = 5,
by.class=FALSE,
use.metric = "edge",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=20,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(0.5, 1, 0.1),
brks1 = seq(0.75, 1, 0.05),
brks2 = seq(0.5, 1, 0.1),
lmts1 = c(0.75, upper.lim2),
lmts2 = c(0.5, upper.lim2),
include.gmac = F,
include.mrpc = T,
sp.method = "glm",
save.plot=FALSE)
#Number of Hidden Confounders
Dt1t2.1=plot.sim.metrics(metrics.mrgn = edge.metrics.mrgn.wf,
metrics.mrpc = edge.metrics.mrpc.wf,
metrics.gmac = edge.metrics.gmac.wf,
params = params,
which.param = 6,
by.class=FALSE,
use.metric = "edge",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=10,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(1, 15, 1),
brks1 = seq(0.8, 1, 0.04),
brks2 = seq(0.5, 1, 0.1),
lmts1 = c(0.8, upper.lim2),
lmts2 = c(0.5, upper.lim2),
include.gmac = F,
include.mrpc = T,
sp.method = "loess",
save.plot=FALSE)
ABCD.1 = ggarrange(Dt1t2.1$plot, Bt1t2.1$plot, Ct1t2.1$plot, At1t2.1$plot, labels = c("A", "B", "C", "D"),
align = "hv", legend = "top", common.legend = T, legend.grob = At1t2.1$legend, hjust = -4.2)
pdf("C:/Users/Bruin/Documents/GitHub/MRGN_extra/Manuscript/Figures/MF2_MRGN.MRPC.all.params.edge.based.pdf", height = 8, width = 12)
plot(ABCD.1)
dev.off()
#Many confs multiple plot
############################################################
many.conf.params=loadRData(file="C:/Users/Bruin/Documents/GitHub/MRGN_extra/Simulations/GMACvMRGN_sim/simulated_data_all_conf_types/sim_set_3_data/many_conf_data/mrpc_v_mrgn_v_gmac_300_params_all_mods_conf_types.RData")
#datasets2 = lapply(datasets, function(x) x$data)
mrgn.many.conf.inf = loadRData(file= "C:/Users/Bruin/Documents/GitHub/MRGN_extra/Simulations/GMACvMRGN_sim/simulated_data_all_conf_types/sim_set_3_data/many_conf_data/mrgn_300_inf_results_all_confs_all_mods.RData")
master.table.many.conf = loadRData(file="C:/Users/Bruin/Documents/GitHub/MRGN_extra/Simulations/GMACvMRGN_sim/simulated_data_all_conf_types/sim_set_3_data/many_conf_data/master_table_MANY_CONF_all_confs_all_mods.RData")
params.with.mrgn.comp.time = loadRData("C:/Users/Bruin/Documents/GitHub/MRGN_extra/Simulations/GMACvMRGN_sim/simulated_data_all_conf_types/sim_set_3_data/diagnostics/mrgn_many_conf_with_comp_times.RData")
gmac.trans.many.conf = loadRData("C:/Users/Bruin/Documents/GitHub/MRGN_extra/Simulations/GMACvMRGN_sim/simulated_data_all_conf_types/sim_set_3_data/many_conf_data/gmac_300_trans_results_all_all_mods_conf_types_preproc.RData")
gmac.cis.many.conf = loadRData("C:/Users/Bruin/Documents/GitHub/MRGN_extra/Simulations/GMACvMRGN_sim/simulated_data_all_conf_types/sim_set_3_data/many_conf_data/gmac_300_cis_results_all_mods_all_conf_types_proproc.RData")
mrgn.many.adj=lapply(mrgn.many.conf.inf, get.adj.from.class)
many.true.adj=lapply(convert.truth(many.conf.params$model), get.adj.from.class)
many.conf.params$true.score = unlist(lapply(many.true.adj, ind.med.edge))
mrgn.many.edge.ind = unlist(lapply(mrgn.many.adj, ind.med.edge))
gmac.many.edge.ind = apply(cbind(gmac.cis.many.conf$output.table$Cis_Sig,
gmac.trans.many.conf$output.table$Trans_Sig),
1, ind.gmac)
mrgn.many.metrics.t1t2 = cbind.data.frame(Method = rep("MRGN", 300),
truth = many.conf.params$true.score,
inf = mrgn.many.edge.ind)
mrpc.many.metrics.t1t2 = cbind.data.frame(Method = rep("MRPC", 300),
truth = rep(1,300),
inf = rep(1,300))
gmac.many.metrics.t1t2 = cbind.data.frame(Method = rep("GMAC", 300),
truth = many.conf.params$true.score,
inf = gmac.many.edge.ind)
colnames(many.conf.params)[-c(1,7)]=c("Residual SD", "Minor Allele Frequency", "SNP Signal", "T1 - T2 Signal", "Number of Simulated Hidden Confounders")
upper.lim3 = 1.05
At1t2.3=plot.sim.metrics(metrics.mrgn = mrgn.many.metrics.t1t2,
metrics.mrpc = mrpc.many.metrics.t1t2,
metrics.gmac = gmac.many.metrics.t1t2,
params = many.conf.params,
which.param = 2,
by.class=FALSE,
use.metric = "t1t2",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=10,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(0.15, 1.5, 0.25),
brks1 = seq(0, 1, 0.2),
brks2 = seq(0.75, 1, 0.05),
lmts1 = c(0, upper.lim3),
lmts2 = c(0.75, upper.lim3),
include.gmac = T,
include.mrpc = F,
sp.method = "loess",
save.plot=FALSE,
remove.ylab = TRUE)
#Minor Allele Freq
Bt1t2.3=plot.sim.metrics(metrics.mrgn = mrgn.many.metrics.t1t2,
metrics.mrpc = mrpc.many.metrics.t1t2,
metrics.gmac = gmac.many.metrics.t1t2,
params = many.conf.params,
which.param = 3,
by.class=FALSE,
use.metric = "t1t2",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=10,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(0, 0.5, 0.1),
brks1 = seq(0.2, 1, 0.2),
brks2 = seq(0.8, 1, 0.05),
lmts1 = c(0.2, upper.lim2),
lmts2 = c(0.8, upper.lim2),
include.gmac = T,
include.mrpc = F,
sp.method = "loess",
save.plot=FALSE,
remove.ylab = TRUE)
#T1 - T2 Signal
Ct1t2.3=plot.sim.metrics(metrics.mrgn = mrgn.many.metrics.t1t2,
metrics.mrpc = mrpc.many.metrics.t1t2,
metrics.gmac = gmac.many.metrics.t1t2,
params = many.conf.params,
which.param = 5,
by.class=FALSE,
use.metric = "t1t2",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=20,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(0.5, 1, 0.1),
brks1 = seq(0, 1, 0.2),
brks2 = seq(0.75, 1, 0.05),
lmts1 = c(0, upper.lim2),
lmts2 = c(0.75, upper.lim2),
include.gmac = T,
include.mrpc = F,
sp.method = "glm",
save.plot=FALSE)
#Number of Hidden Confounders
Dt1t2.3=plot.sim.metrics(metrics.mrgn = mrgn.many.metrics.t1t2,
metrics.mrpc = mrpc.many.metrics.t1t2,
metrics.gmac = gmac.many.metrics.t1t2,
params = many.conf.params,
which.param = 6,
by.class=FALSE,
use.metric = "t1t2",
which.class=NULL,
plot.it=TRUE,
spline.it=TRUE,
spline.int=10,
dodge=0.01,
return.means=TRUE,
rplot=2,
nplot=1,
xbrks = seq(15, 50, 5),
brks1 = seq(0.2, 1, 0.2),
brks2 = seq(0.8, 1, 0.05),
lmts1 = c(0.2, upper.lim2),
lmts2 = c(0.8, upper.lim2),
include.gmac = T,
include.mrpc = F,
sp.method = "loess",
save.plot=FALSE)
ABCD.3 = ggarrange(Dt1t2.3$plot, Bt1t2.3$plot, Ct1t2.3$plot, At1t2.3$plot, labels = c("A", "B", "C", "D"),
align = "hv", legend = "top", common.legend = T, legend.grob = At1t2.3$legend, hjust = -4.2)
pdf("C:/Users/Bruin/Documents/GitHub/MRGN_extra/Manuscript/SuppFigures/SF2_MRGN.GMAC.all.params.t1t2.50confs.pdf", height = 8, width = 12)
plot(ABCD.3)
dev.off()
0.023*60
36-44
rare.idx
#perform permutation on all trios
#perm.all = sapply(data.with.pcs, infer.trio, gamma = 0.5, use.perm = T, nperms = 1000)
#perm.all = loadRData(file = "/mnt/ceph/jarredk/MRGN_extra/GTEx_tissues_analysis/Manuscript_results/perm.all.trios.WB.RData")
#no permutation
#no permutation
#no.perm = sapply(data.with.pcs, infer.trio, gamma = 0.5, use.perm = F, nperms = 1000)
#no.perm = loadRData(file = "/mnt/ceph/jarredk/MRGN_extra/GTEx_tissues_analysis/Manuscript_results/no.perm.all.trios.WB.RData")
perm.all = loadRData(file = "C:/Users/Bruin/Documents/GitHub/MRGN_extra/GTEx_tissues_analysis/Manuscript_results/perm.all.trios.WB.RData")
#no permutation
#no permutation
#no.perm = sapply(data.with.pcs, infer.trio, gamma = 0.5, use.perm = F, nperms = 1000)
no.perm = loadRData(file = "C:/Users/Bruin/Documents/GitHub/MRGN_extra/GTEx_tissues_analysis/Manuscript_results/no.perm.all.trios.WB.RData")
rare.idx = which(unlist(perm.all[13,])<0.05)
rare.var = rep("Minor Freq > 0.05", dim(perm.all)[2])
rare.var[rare.idx] = "Minor Freq < 0.05"
#combine all permutation pvalues into a matrix
pvalues.mat = cbind.data.frame(pb12.with.perm = unlist(perm.all[8,]),
pb12.no.perm = unlist(no.perm[8,]),
pb22.with.perm = unlist(perm.all[10,]),
pb22.no.perm = unlist(no.perm[10,]),
Allele.freq = rare.var)
library(ggpubr)
library(MRGN)
#perform permutation on all trios
#perm.all = sapply(data.with.pcs, infer.trio, gamma = 0.5, use.perm = T, nperms = 1000)
#perm.all = loadRData(file = "/mnt/ceph/jarredk/MRGN_extra/GTEx_tissues_analysis/Manuscript_results/perm.all.trios.WB.RData")
#no permutation
#no permutation
#no.perm = sapply(data.with.pcs, infer.trio, gamma = 0.5, use.perm = F, nperms = 1000)
#no.perm = loadRData(file = "/mnt/ceph/jarredk/MRGN_extra/GTEx_tissues_analysis/Manuscript_results/no.perm.all.trios.WB.RData")
perm.all = loadRData(file = "C:/Users/Bruin/Documents/GitHub/MRGN_extra/GTEx_tissues_analysis/Manuscript_results/perm.all.trios.WB.RData")
#no permutation
#no permutation
#no.perm = sapply(data.with.pcs, infer.trio, gamma = 0.5, use.perm = F, nperms = 1000)
no.perm = loadRData(file = "C:/Users/Bruin/Documents/GitHub/MRGN_extra/GTEx_tissues_analysis/Manuscript_results/no.perm.all.trios.WB.RData")
rare.idx = which(unlist(perm.all[13,])<0.05)
rare.var = rep("Minor Freq > 0.05", dim(perm.all)[2])
rare.var[rare.idx] = "Minor Freq < 0.05"
#combine all permutation pvalues into a matrix
pvalues.mat = cbind.data.frame(pb12.with.perm = unlist(perm.all[8,]),
pb12.no.perm = unlist(no.perm[8,]),
pb22.with.perm = unlist(perm.all[10,]),
pb22.no.perm = unlist(no.perm[10,]),
Allele.freq = rare.var)
h=0.01
A=ggplot(data = pvalues.mat)+
geom_point(aes(x=log10(pb12.no.perm), y=log10(pb12.with.perm), color=Allele.freq))+
theme(legend.position = "bottom")+
labs(y = expression(log10('pval b22 with permutation')),
x = expression(log10('pval b22 without permutation')),
subtitle = "pvals for b22 with and without permutation")+
scale_x_continuous(limits = c(-15,0))+
scale_y_continuous(limits = c(-15,0))+
geom_abline(intercept = 0, slope = 1, linetype="dotted")+
geom_vline(xintercept = log10(h), color="red", linetype="dashed")+
geom_hline(yintercept = log10(h), color="red", linetype="dashed")
#pdf("/mnt/ceph/jarredk/MRGN_extra/GTEx_tissues_analysis/Manuscript_results/Perm_check_plot.pdf")
plot(A)
pvalues.mat.lf = cbind.data.frame(pvalue.pb12 = c(pvlaues.mat$pb12.with.perm, pvalues.mat$pb12.no.perm),
Type = c(rep("Permutation", length(pvalues.mat$pb12.with.perm)),
rep("Parametric", length(pvalues.mat$pb12.no.perm))))
pvalues.mat.lf = cbind.data.frame(pvalue.pb12 = c(pvalues.mat$pb12.with.perm, pvalues.mat$pb12.no.perm),
Type = c(rep("Permutation", length(pvalues.mat$pb12.with.perm)),
rep("Parametric", length(pvalues.mat$pb12.no.perm))))
ggplot(pvalues.mat.lf, aes(x=pvalue.pb12, color = Type)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
ggplot(pvalues.mat.lf, aes(x=pvalue.pb12, color = Type)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") + geom_density()  # Overlay with transparent density plot
ggplot(pvalues.mat.lf, aes(x=pvalue.pb12, color = Type)) +
geom_density()
ggplot(pvalues.mat.lf, aes(x=pvalue.pb12, color = Type)) +
geom_density(fill = Type)
ggplot(pvalues.mat.lf, aes(x=pvalue.pb12, color = Type, fill = Type)) +
geom_density(fill = Type)
ggplot(pvalues.mat.lf, aes(x=pvalue.pb12, color = Type, fill = Type)) +
geom_density()
ggplot(pvalues.mat.lf, aes(x=pvalue.pb12, color = Type, fill = Type)) +
geom_density(alpha = 0.5)
pvalues.mat.lf.pb22 = cbind.data.frame(pvalue.pb22 = c(pvalues.mat$pb22.with.perm, pvalues.mat$pb22.no.perm),
Type = c(rep("Permutation", length(pvalues.mat$pb22.with.perm)),
rep("Parametric", length(pvalues.mat$pb22.no.perm))))
ggplot(pvalues.mat.lf.pb12, aes(x=pvalue.pb12, color = Type, fill = Type)) +
geom_density(alpha = 0.5)
pvalues.mat.lf.pb12 = cbind.data.frame(pvalue.pb12 = c(pvalues.mat$pb12.with.perm, pvalues.mat$pb12.no.perm),
Type = c(rep("Permutation", length(pvalues.mat$pb12.with.perm)),
rep("Parametric", length(pvalues.mat$pb12.no.perm))))
pvalues.mat.lf.pb22 = cbind.data.frame(pvalue.pb22 = c(pvalues.mat$pb22.with.perm, pvalues.mat$pb22.no.perm),
Type = c(rep("Permutation", length(pvalues.mat$pb22.with.perm)),
rep("Parametric", length(pvalues.mat$pb22.no.perm))))
ggplot(pvalues.mat.lf.pb12, aes(x=pvalue.pb12, color = Type, fill = Type)) +
geom_density(alpha = 0.5)
ggplot(pvalues.mat.lf.pb22, aes(x=pvalue.pb12, color = Type, fill = Type)) +
geom_density(alpha = 0.5)
ggplot(pvalues.mat.lf.pb22, aes(x=pvalue.pb22, color = Type, fill = Type)) +
geom_density(alpha = 0.5)
ggplot(pvalues.mat.lf.pb12, aes(x=pvalue.pb12, color = Type, fill = Type)) +
geom_density(alpha = 0.5)
ggplot(pvalues.mat.lf.pb22, aes(x=pvalue.pb22, color = Type, fill = Type)) +
geom_density(alpha = 0.5)
image(cor(pvalues.mat[,-5]))
heatmap(cor(pvalues.mat[,-5]))
library(devtools)
document()
build()
install()
library(MRGN)
